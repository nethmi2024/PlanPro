@model PlanPro.Models.FinancialOverviewViewModel
@{
    ViewBag.Title = "Financial Charts";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">

<style>
    body {
        font-family: 'Poppins', sans-serif;
    }

    .text-secondary:hover {
        color: #1cc88a !important;
    }

    .filter-card {
        background-color: #fff;
        border-radius: 1rem;
        padding: 1.5rem;
        box-shadow: 0 0.75rem 1.25rem rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
    }

    .form-floating > label {
        color: #6c757d;
    }

    .btn-gradient {
        background: linear-gradient(to right, #4e73df, #1cc88a);
        border: none;
        color: #fff;
        font-weight: 600;
        border-radius: 0.5rem;
    }

        .btn-gradient:hover {
            background: linear-gradient(to right, #1cc88a, #4e73df);
            color: #fff;
        }

    .chart-container {
        height: 250px;
        position: relative;
    }

    .expense-trend-card {
        background-color: #ffffff;
        border-radius: 1rem;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.05);
        transition: 0.3s ease;
    }

        .expense-trend-card:hover {
            transform: translateY(-2px);
        }

    .expense-trend-title {
        font-size: 1.25rem;
        font-weight: 600;
        text-align: center;
        margin-bottom: 1rem;
        color: #4e73df;
    }

    .chart-container-trend {
        height: 320px;
        position: relative;
    }

    i.bi {
        margin-right: 0.5rem;
        vertical-align: middle;
        color: #4e73df;
    }
</style>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />


<div class="container my-5">
    <div class="text-center mb-5">
        <h2 class="display-5 fw-bold"><i class="bi bi-graph-up"></i> Financial Charts</h2>

        <p class="text-muted">Visual representation of your financial data.</p>
        <div class="text-center mt-4">
            <a href="@Url.Action("Index", "Financial")" class="text-decoration-none text-secondary fw-semibold">
                ← Back to Dashboard
            </a>
        </div>
    </div>

    <div class="row justify-content-center mb-5">
        <div class="col-lg-10">
            <div class="filter-card">
                @using (Html.BeginForm("Charts", "Financial", FormMethod.Get, new { @class = "row g-3" }))
                {
                    <div class="col-md-3">
                        <div class="form-floating">
                            <input type="date" name="startDate" id="startDate" class="form-control" value="@Request.QueryString["startDate"]" />
                            <label for="startDate">Start Date</label>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-floating">
                            <input type="date" name="endDate" id="endDate" class="form-control" value="@Request.QueryString["endDate"]" />
                            <label for="endDate">End Date</label>
                        </div>
                    </div>
                    <div class="col-md-2 d-flex align-items-end">
                        <div class="d-flex gap-2 w-100">
                            <button type="submit" class="btn btn-gradient w-100">Filter</button>
                            <a href="@Url.Action("Charts", "Financial")" class="btn btn-outline-secondary w-100">Reset</a>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="row mb-5">
        <div class="col-md-6 mb-4">
            <div class="expense-trend-card p-4">
                <h5 class="expense-trend-title text-center"><i class="bi bi-cash-stack"></i> Income vs Expenses</h5>
                <div class="chart-container">
                    <canvas id="incomeExpenseChart"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6 mb-4">
            <div class="expense-trend-card p-4">
                <h5 class="expense-trend-title text-center"><i class="bi bi-pie-chart"></i> Expenses by Category</h5>
                <div class="chart-container">
                    <canvas id="categoryChart"></canvas>
                </div>
            </div>
        </div>
        <div class="row mb-5">
            <div class="col-md-12 mb-4">
                <div class="expense-trend-card p-4">
                    <h5 class="expense-trend-title"><i class="bi bi-bar-chart-line"></i> Expense Trend Over Time</h5>
                    <div class="chart-container-trend">
                        <canvas id="expenseTrendChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const income = @Model.MonthlyIncome;
        const expenses = @Model.TotalExpenses;

        const expenseData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(
            Model.Expenses
                .GroupBy(e => e.Category)
                .Select(g => new {
                    Category = g.Key,
                    Total = g.Sum(e => e.Amount)
                })
        ));

        new Chart(document.getElementById('incomeExpenseChart'), {
            type: 'doughnut',
            data: {
                labels: ['Income', 'Expenses'],
                datasets: [{
                    data: [income, expenses],
                    backgroundColor: ['#1cc88a', '#e74a3b']
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: { position: 'bottom' }
                }
            }
        });

        const categoryLabels = expenseData.map(x => x.Category);
        const categoryTotals = expenseData.map(x => x.Total);

        new Chart(document.getElementById('categoryChart'), {
            type: 'bar',
            data: {
                labels: categoryLabels,
                datasets: [{
                    label: 'Amount',
                    data: categoryTotals,
                    backgroundColor: '#4e73df'
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { display: false }
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        const expenseTrendData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(
            Model.Expenses
                .GroupBy(e => e.Date.ToString("yyyy-MM"))
                .Select(g => new {
                    Month = g.Key,
                    Total = g.Sum(e => e.Amount)
                })
                .OrderBy(x => x.Month)
        ));

        const trendLabels = expenseTrendData.map(x => x.Month);
        const trendTotals = expenseTrendData.map(x => x.Total);

        const trendCtx = document.getElementById('expenseTrendChart').getContext('2d');

        const gradientStroke = trendCtx.createLinearGradient(0, 0, 0, 300);
        gradientStroke.addColorStop(0, 'rgba(231, 74, 59, 0.3)');
        gradientStroke.addColorStop(1, 'rgba(231, 74, 59, 0)');

        new Chart(trendCtx, {
            type: 'line',
            data: {
                labels: trendLabels,
                datasets: [{
                    label: 'Total Expenses',
                    data: trendTotals,
                    fill: true,
                    backgroundColor: '#e74a3b',
                    borderColor: '#e74a3b',
                    pointBackgroundColor: '#e74a3b',
                    pointBorderColor: '#fff',
                    pointHoverRadius: 6,
                    pointHoverBackgroundColor: '#1cc88a',
                    pointHoverBorderColor: '#1cc88a',
                    pointRadius: 4,
                    tension: 0.4

                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: { position: 'bottom' },
                    tooltip: {
                        callbacks: {
                            label: function (context) {
                                return 'Rs ' + context.formattedValue;
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Amount (Rs)'
                        },
                        ticks: {
                            color: '#6c757d'
                        }
                    },
                    x: {
                        title: {
                            display: true,
                            text: 'Month'
                        },
                        ticks: {
                            color: '#6c757d'
                        }
                    }
                }
            }
        });

    });
</script>

